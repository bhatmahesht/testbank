<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Implements hook help
 */

function quiz_testbank_help($path) {
	$output = "";
	switch ($path) {
		case 'testbank/quiz/create':
			break;
	}

	return $output;
}

/*
 *  Implements hook menu
 */

function quiz_testbank_menu() {

	$items['testbank/quiz/create'] = array(
		'title' => 'Create a quiz based on testbank',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('quiz_testbank_create', 2),
		'access arguments' => array('access testbank'),
	);

	$items['testbank/quiz/myresults'] = array(
		'title' => 'Results based on testbank',
		'page callback' => 'quiz_testbank_mynewresults',
		'access arguments' => array('access testbank'),
	);

	$items['user/quiz/%/userresults/%/result'] = array(
		'title' => 'result for question',
		'page callback' => 'quiz_testbank_question_result',
		'page arguments' => array(2, 4),
		'access arguments' => array('access testbank'),
	);

	return $items;
}

/*
 * Implements hook menu alter
 */

function quiz_testbank_menu_alter(&$items) {
	$node_take = $items['node/%node/take'];
	$items['node/%node/take']['page callback'] = 'quiz_testbank_take';
	$items['node/%node/take']['type'] = MENU_CALLBACK;
	$items['node/%node/take']['title'] = "";
}

/*
 * Implements hook theme
 */

function quiz_testbank_theme() {
	return array(
		'quiz_testbank_report_form' => array(
			'render element' => 'form',
			'template' => 'quiz-testbank-report-form',
		),
		'quiz_testbank_quiz_result_questions' => array(
			'variables' => array('questions' => NULL, 'rid' => NULL),
		),
		'quiz_result_summary_top' => array(
			'variables' => array('result_id' => NULL),
			'template' => 'quiz-testbank-quiz-result-summary-top',
		),
		'quiz_testbank_quiz_navigation' => array(
			'render element' => 'navigation',
		),
		'quiz_testbank_answering_form' => array(
			'render element' => 'form',
		),
	);
}

/*
 * Implements hook init to add stylesheets
 */

function quiz_testbank_init() {
	$path = drupal_get_path('module', 'quiz_testbank');
	drupal_add_css($path . "/quiz_testbank.css");
}

/*
 * Implements hook permission
 */

function quiz_testbank_permission() {
	return array('access testbank' => array(
			'title' => 'Create Quiz based on TestBank',
			'description' => 'allows taking questions based on testbank',
	));
}

function quiz_testbank_create($form, &$form_state) {

	$form['mode'] = array(
		'#title' => 'Question Mode',
		'#type' => 'fieldset',
		'#collpsible' => TRUE,
		'#collapsed' => FALSE,
	);
	$form['mode']['question_mode'] = array(
		'#title' => 'Choose mode of questions',
		'#type' => 'radios',
		'#options' => array(1 => 'All Questions', 2 => 'Unused Questions', 3 => 'Incorrect Questions'),
		'#default_value' => 1,
		'#multicolumn' => array('width' => 3),
		'#ajax' => array(
			'callback' => 'quiz_testbank_categories_question_mode',
			'wrapper' => 'question_categories'
		)
	);
	$form['exam'] = array(
		'#title' => 'Exam Mode',
		'#type' => 'fieldset',
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
	);
	$form['exam']['exam_mode'] = array(
		'#title' => 'Choose your Exam Mode',
		'#type' => 'radios',
		'#options' => array(1 => 'Timed', 2 => 'Untimed', 3 => 'Tutor'),
		'#default_value' => 1,
		//'#description' => 'When the mode is timed .. How to set time? Is it based on number of questions?',
	);

	$form['questions'] = array(
		'#title' => 'Question Categories',
		'#type' => 'fieldset',
		'#prefix' => '<div id = "question_categories">',
		'#suffix' => '</div>',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);

	$mode = !empty($form_state['values']['question_mode']) ? $form_state['values']['question_mode'] : 1;
	$options = quiz_testbank_categories($mode);
	$selectall = !empty($form_state['values']['selectall']) ? $form_state['values']['selectall'] : 0;
	$default_val = array();
	if ($selectall == 1) {
		$default_val = array_keys($options);
	}

	$form['questions']['selectall'] = array(
		'#title' => 'Select all categories',
		'#type' => 'checkbox',
		'#default_value' => 0,
		'#ajax' => array(
			'callback' => 'quiz_testbank_categories_select_all',
			'wrapper' => 'question_categoreis_all',
		),
	);

	unset($form_state['input']['categories']);
	$form['questions']['categories'] = array(
		'#title' => 'Choose questions from these categories',
		'#type' => 'checkboxes',
		'#prefix' => '<div id="question_categoreis_all">',
		'#suffix' => '</div>',
		'#multicolumn' => array('width' => 2),
		'#options' => $options,
		'#default_value' => $default_val,
	);


	$form['num_questions'] = array(
		'#type' => 'textfield',
		'#title' => 'Number of Questions',
		//'#description' => 'Feature not yet implemented. Please inform me how to draw number of questions.'
		//. 'Is it by drawing random questions by each category?',
		'#size' => 20,
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Create Exam',
	);

	if (isset($form_state['values']['output'])) {
		$form['output'] = array(
			'#type' => 'markup',
			'#markup' => $form_state['values']['output'],
		);
	}

	return $form;
}

/*
 * Returns categories for test bank as array
 */

function quiz_testbank_categories($mode) {
	$query = db_select('taxonomy_term_data', 'td');
	$query->leftjoin('taxonomy_vocabulary', 'tv', 'td.vid=tv.vid');
	$query->leftjoin('taxonomy_index', 'ti', 'td.tid=ti.tid');
	$query->fields('td', array('tid', 'name'));
	$query->addExpression('count(ti.nid)', 'sum');
	$query->condition('tv.machine_name', 'test_bank');
	$query->groupBy('td.tid');
	$values = $query->execute()->fetchAll();
	$result = array();
	foreach ($values as $obj) {

		$total = $obj->sum;
		$used_questions = quiz_testbank_categories_used_questions_results($mode, $obj->tid);
		$val = $total - $used_questions;
		$result["$obj->tid"] = $obj->name . "($val /$total)";
	}
	return $result;
}

/*
 * gets used questions for each category
 */

function quiz_testbank_categories_used_questions($mode, $catid) {
	global $user;
	$used_questions = 0;
	switch ($mode) {
		case '1':
			$used_questions = 0;
			break;
		case '2':
			$query = db_select('taxonomy_index', 'ti');
			$query->rightJoin('quiz_testbank', 'qt', 'ti.nid=qt.nid');
			$query->fields('ti', array('tid'));
			$query->addExpression('count(ti.nid)', 'sum');
			$query->condition('ti.tid', $catid);
			$query->condition('qt.uid', $user->uid);
			$query->groupBy('ti.tid');
			$result = $query->execute()->fetch();
			if ($result) {
				$used_questions = $result->sum;
			}
			break;
		case '3':
			$query = db_select('taxonomy_index', 'ti');
			$query->rightJoin('quiz_testbank', 'qt', 'ti.nid=qt.nid');
			$query->fields('ti', array('tid'));
			$query->addExpression('count(ti.nid)', 'sum');
			$query->condition('ti.tid', $catid);
			$query->condition('qt.iscorrect', 0);
			$query->condition('qt.uid', $user->uid);
			$query->groupBy('ti.tid');
			$result = $query->execute()->fetch();
			if ($result) {
				$used_questions = $result->sum;
			}
			break;
	}
	return $used_questions;
}

/*
 * gets unused questions for each category
 */

function quiz_testbank_categories_used_questions_results($mode, $catid) {
	global $user;
	$used_questions = 0;
	switch ($mode) {
		case '1':
			$used_questions = 0;
			break;
		case '2':
			$query = db_select('quiz_node_results_answers', 'qa');
			$query->leftjoin('quiz_node_results', 'qr', 'qa.result_id=qr.result_id');
			$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = qa.question_nid');
			$query->addExpression('count(DISTINCT qa.question_nid)', 'sum');
			$query->condition('ti.tid', $catid);
			$query->condition('qr.uid', $user->uid);
			$query->groupBy('ti.tid');
			$result = $query->execute()->fetch();
			if ($result) {
				$used_questions = $result->sum;
			}
			break;
		case '3':
			$query = db_select('quiz_node_results_answers', 'qa');
			$query->leftjoin('quiz_node_results', 'qr', 'qa.result_id=qr.result_id');
			$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = qa.question_nid');
			$query->addExpression('count(DISTINCT qa.question_nid)', 'sum');
			$query->condition('ti.tid', $catid);
			$query->condition('qr.uid', $user->uid);
			$query->condition('qa.is_correct', 1);
			$query->groupBy('ti.tid');
			$result = $query->execute()->fetch();
			if ($result) {
				$used_questions = $result->sum;
			}
			break;
	}
	return $used_questions;
}

/*
 * Implements submit handler for quiz_category_personal_create
 */

function quiz_testbank_create_submit($form, &$form_state) {
	$cats = $form_state['values']['categories'];
	$mode = $form_state['values']['question_mode'];
	$num_questions = intval($form_state['values']['num_questions']);

	$children = array();
	foreach ($cats as $cat) {
		if ($cat == 0) {
			continue;
		}
		$query = db_select('taxonomy_term_data', 'td');
		$query->fields('td', array('name'));
		$query->condition('tid', $cat);
		$name = $query->execute()->fetchColumn();

		switch ($mode) {
			case 1:
				$query = db_select('node', 'n');
				$query->join('taxonomy_index', 'tn', 'n.nid=tn.nid');
				$query->fields('n', array('nid', 'vid'));
				$query->condition('tn.tid', $cat);
				$result = $query->execute()->fetchAll();
				$children = array_merge($children, $result);
				break;
			case 2:
				$used_nids = quiz_testbank_used_nids_results($cat);
				$query = db_select('node', 'n');
				$query->join('taxonomy_index', 'tn', 'n.nid=tn.nid');
				$query->fields('n', array('nid', 'vid'));
				$query->condition('tn.tid', $cat);
				if (sizeof($used_nids) != 0) {
					$query->condition('n.nid', $used_nids, 'NOT IN');
				}
				$result = $query->execute()->fetchAll();
				$children = array_merge($children, $result);
				break;
			case 3:
				$incorrect_nids = quiz_testbank_incorrect_nids_results($cat);
				$query = db_select('node', 'n');
				$query->join('taxonomy_index', 'tn', 'n.nid=tn.nid');
				$query->fields('n', array('nid', 'vid'));
				$query->condition('tn.tid', $cat);
				if (count($incorrect_nids) != 0) {
					$query->condition('n.nid', $incorrect_nids, 'NOT IN');
				}
				$result = $query->execute()->fetchAll();
				$children = array_merge($children, $result);
				break;
		}
	}
	$node = quiz_testbank_create_new_quiz();
	$quiz = node_load($node->nid, $node->vid);
	$quiz->revision = 1;
	$quiz->takes = 1;

	if ($num_questions > count($children)) {
		$num_questions = count($children);
	}

	$num_questions = $num_questions == 0 ? count($children) : $num_questions;

	$exam_mode = $form_state['values']['exam_mode'];
	switch ($exam_mode) {
		case 1:
			$quiz->display_feedback = 1;
			$quiz->time_limit = $num_questions * 60;
			$quiz->title .= " time limit";
			break;
		case 2:
			$quiz->display_feedback = 1;
			$quiz->time_limit = 0;
			$quiz->title .= ' untimed';
			break;
		case 3:
			$quiz->display_feedback = 1;
			$quiz->repeat_until_correct = 1;
			$quiz->feedback_time = 1;
			$quiz->title .= " training mode";
			break;
	}

	//quiz_test_bank_delete_quiz_questions($quiz->nid, $quiz->vid);

	$randquetions = array_rand($children, $num_questions);
	foreach ($randquetions as $quest) {
		$child = $children["$quest"];
		quiz_testbank_insert_question($quiz->nid, $quiz->vid, $child->nid, $child->vid);
	}

	$quiz->title .= ' ' . count($randquetions) . ' questions';
	$quiz_created_date = date('M d Y');
	$quiz->title .= " on $quiz_created_date based on testbank";
	node_save($quiz);
//	foreach ($children as $child) {
//		quiz_testbank_insert_question($parent_nid, $parent_vid, $child->nid, $child->vid);
//	}
//	$node = node_load($parent_nid);
//	$view = node_view($node, 'full');
//	$output = drupal_render($view);
//	$form_state['values']['output'] = $output;
//	drupal_set_message($name);
//
//	$form_state['rebuild'] = TRUE;
	drupal_goto("node/$quiz->nid");
}

/*
 * Get quiz node id and vid
 */

function quiz_testbank_get_quiz_nid_vid() {
	global $user;
	$query = db_select('node', 'n');
	$query->fields('n', array('nid', 'vid'));
	$query->condition('type', 'quiz');
	$query->condition('status', 1);
	$query->condition('uid', $user->uid);
	$result = $query->execute()->fetchAssoc();
	if ($result == false) {
		$node = new stdClass();
		$node->type = 'quiz';
		$node->title = 'Quiz based on testbank for ' . $user->name;
		$node->uid = $user->uid;
		$node->allow_jumping = 1;
		$node->allow_skipping = 1;
		$node->promote = 0;
		node_object_prepare($node);
		$node = node_submit($node);
		node_save($node);
		$result['nid'] = $node->nid;
		$result['vid'] = $node->vid;
	}
	return $result;
}

/*
 * Creates new quiz for the user each time he acccess testbank
 */

function quiz_testbank_create_new_quiz() {
	global $user;
	$node = new stdClass();
	$node->type = 'quiz';
	$node->title = 'Quiz for ' . $user->name;
	$node->uid = $user->uid;
	$node->allow_jumping = 1;
	$node->allow_skipping = 1;
	$node->promote = 0;
	$node->mark_doubtful = 1;
	node_object_prepare($node);
	$quiz = node_submit($node);
	node_save($quiz);
	return $quiz;
}

/*
 * Merge to quiz
 */

function quiz_testbank_insert_question($parent_nid, $parent_vid, $child_nid, $child_vid) {

	$node = node_load($child_nid);
	$id = db_merge('quiz_node_relationship')
		->key(array(
			'parent_nid' => $parent_nid,
			'parent_vid' => $parent_vid,
			'child_nid' => $child_nid,
			'child_vid' => $child_vid,
		))
		->fields(array(
			'parent_nid' => $parent_nid,
			'parent_vid' => $parent_vid,
			'child_nid' => $child_nid,
			'child_vid' => $child_vid,
			'question_status' => 1,
			'max_score' => $node->max_score,
			'auto_update_max_score' => 1,
		))
		->execute();
	return $id;
}

/*
 * ajax callback for quesiton mode
 */

/*
 * Refresh or delete all the child nodes of a quiz
 */

function quiz_test_bank_delete_quiz_questions($parent_nid, $parent_vid) {
	$id = db_delete('quiz_node_relationship')
		->condition('parent_nid', $parent_nid)
		->condition('parent_vid', $parent_vid)
		->execute();
	return $id;
}

function quiz_testbank_categories_question_mode($form, &$form_state) {
	return $form['questions'];
}

/*
 * Ajax callback for quiz question categoreis
 */

function quiz_testbank_categories_select_all($form, &$form_state) {
//	$form['questions']['categories']['#description'] = 'returned from ajax call';
//	$form_state['complete form']['questions']['categories']['#defaults_loaded'] = 0;
	return $form['questions']['categories'];
}

/*
 * function to get used nids of the category
 */

function quiz_testbank_used_nids($cat) {
	global $user;
	$query = db_select('taxonomy_index', 'ti');
	$query->rightJoin('quiz_testbank', 'qt', 'ti.nid=qt.nid');
	$query->fields('ti', array('nid'));
	$query->condition('ti.tid', $cat);
	$query->condition('qt.uid', $user->uid);
	$nids = $query->execute()->fetchCol();
	return $nids;
}

/*
 * Used nids from results table
 */

function quiz_testbank_used_nids_results($cat) {
	global $user;
	$query = db_select('quiz_node_results_answers', 'qa');
	$query->leftjoin('quiz_node_results', 'qr', 'qa.result_id=qr.result_id');
	$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = qa.question_nid');
	$query->fields('qa', array('question_nid'));
	$query->condition('ti.tid', $cat);
	$query->condition('qr.uid', $user->uid);
	$nids = $query->execute()->fetchCol();
	return $nids;
}

/*
 * Function to get incorrect nids of the category
 */

function quiz_testbank_incorrect_nids($cat) {
	global $user;
	$query = db_select('taxonomy_index', 'ti');
	$query->rightJoin('quiz_testbank', 'qt', 'ti.nid=qt.nid');
	$query->fields('ti', array('nid'));
	$query->condition('ti.tid', $cat);
	$query->condition('qt.iscorrect', 0);
	$query->condition('qt.uid', $user->uid);
	$nids = $query->execute()->fetchCol();
	return $nids;
}

/*
 * Function to get incorrect nids of the category from results
 */

function quiz_testbank_incorrect_nids_results($cat) {
	global $user;
	$query = db_select('quiz_node_results_answers', 'qa');
	$query->leftjoin('quiz_node_results', 'qr', 'qa.result_id=qr.result_id');
	$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = qa.question_nid');
	$query->fields('qa', array('question_nid'));
	$query->condition('ti.tid', $cat);
	$query->condition('qr.uid', $user->uid);
	$query->condition('qa.is_correct', 1);
	$nids = $query->execute()->fetchCol();
	return $nids;
}

/*
 * Implements results in testbank
 */

function quiz_testbank_myresults() {
	global $user;
	$query = db_select('taxonomy_term_data', 'td');
	$query->leftjoin('taxonomy_vocabulary', 'tv', 'td.vid=tv.vid');
	$query->fields('td', array('tid', 'name'));
	$query->condition('tv.machine_name', 'test_bank');
	$terms = $query->execute()->fetchAllKeyed();
	$header = array('term', 'user average', 'cumulative score');
	$rows = array();

	foreach ($terms as $tid => $tname) {
		$all_correct = quiz_testbank_user_results($tid);
		$all = quiz_testbank_user_maxscore($tid);
		$all = $all ? $all : 0;
		$all_correct = $all_correct ? $all_correct : 0;

		$user_correct = quiz_testbank_user_results($tid, false, $user->uid);
		$user_all = quiz_testbank_user_maxscore($tid, $user->uid);
		$user_all = $user_all ? $user_all : 0;
		$user_correct = $user_correct ? $user_correct : 0;

		$row = array();
		$row[] = $tname;
		$row[] = "$user_correct of $user_all ";
		$row[] = "$all_correct of $all ";

		$rows[] = $row;
	}

	$output = theme('table', array('header' => $header, 'rows' => $rows));
	return $output;
}

/*
  <<<<<<< OURS
 * Implements user results on the testbank and allows performance of users.
 */

function quiz_testbank_mynewresults() {
	global $user;
	$query = db_select('taxonomy_term_data', 'td');
	$query->leftjoin('taxonomy_vocabulary', 'tv', 'td.vid=tv.vid');
	$query->fields('td', array('tid', 'name'));
	$query->condition('tv.machine_name', 'test_bank');
	$terms = $query->execute()->fetchAllKeyed();

	$header = array('Category', 'user average', 'cumulative average' => 'Cumulative average of all users');
	$rows = array();
	foreach ($terms as $tid => $term) {
		$user_scores = quiz_testbank_get_user_score_term($tid, $user->uid);
		$total_scores = quiz_testbank_get_user_score_term($tid);
		$row['Category'] = $term;
		$row['user average'] = $user_scores['user_score'] . " of " . $user_scores['max_score'];
		$row['cumulative average'] = $total_scores['user_score'] . " of " . $total_scores['max_score'];
		$rows[] = $row;
	}

	return theme('table', array('header' => $header, 'rows' => $rows));
}

/*
 * Implements a function get user score for term
 */

function quiz_testbank_get_user_score_term($tid, $uid = 0) {
	$query = db_select('quiz_node_results_answers', 'qna');
	$query->leftJoin('quiz_node_results', 'qnr', 'qna.result_id=qnr.result_id');
	$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = qna.question_nid');
	$query->fields('qna', array('result_id', 'question_nid', 'question_vid', 'points_awarded'));
	$query->fields('qnr', array('nid', 'vid'));
	$query->fields('ti', array('tid'));
	if ($uid != 0) {
		$query->condition('qnr.uid', $uid);
	}
	$query->condition('ti.tid', $tid);
	$query->condition('qnr.is_evaluated', 1);
	$results = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
	$user_score = 0;
	$user_max_score = 0;

	foreach ($results as $result) {
		$user_score += $result['points_awarded'];
		$user_max_score += quiz_testbank_get_max_score($result['nid'], $result['vid'], $result['question_nid'], $result['question_vid']);
	}

	$ret = array();
	$ret['user_score'] = $user_score;
	$ret['max_score'] = $user_max_score;

	return $ret;
}

/*
 * Gets max score for a question
 */

function quiz_testbank_get_max_score($parent_nid, $parent_vid, $child_nid, $child_vid) {

	$query = db_select('quiz_node_relationship', 'qns');
	$query->fields('qns', array('max_score'));
	$query->condition('qns.parent_nid', $parent_nid);
	$query->condition('qns.parent_vid', $parent_vid);
	$query->condition('qns.child_nid', $child_nid);
	$query->condition('qns.child_vid', $child_vid);

	$max_score = $query->execute()->fetchColumn();
	return $max_score;
}

/*
  =======
  >>>>>>> THEIRS
 * a function to get total answers
 */

function quiz_testbank_user_results($cat, $iscorrect = false, $uid = 0) {

	$query = db_select('quiz_node_results_answers', 'qa');
	$query->leftjoin('quiz_node_results', 'qr', 'qa.result_id=qr.result_id');
	$query->leftjoin('taxonomy_index', 'ti', 'qa.question_nid=ti.nid');
	$query->addExpression('sum(qa.points_awarded)', 'total');
	$query->condition('ti.tid', $cat);
	if ($uid != 0) {
		$query->condition('qr.uid', $uid);
	}
	if ($iscorrect != false) {
		$query->condition('qa.is_correct', 1);
	}
	$query->groupBy('ti.tid');
	$total = $query->execute()->fetchColumn();
	return $total;
}

/*
 * to get user total max scores for each user
 */

function quiz_testbank_user_maxscore($cat, $uid = 0) {
	$query = db_select('quiz_node_relationship', 'qr');
	$query->leftjoin('quiz_node_results_answers', 'qa', 'qr.child_nid=qa.question_nid');
	$query->leftjoin('quiz_node_results', 'qnr', 'qnr.result_id=qa.result_id');
	$query->rightjoin('taxonomy_index', 'ti', 'ti.nid=qr.child_nid');
	$query->addExpression('sum(qr.max_score)', 'max_score');
	if ($uid != 0) {
		$query->condition('qnr.uid', $uid);
	}
	$query->condition('ti.tid', $cat);
	$query->groupBy('ti.tid');
	$max_score = $query->execute()->fetchColumn();
	return $max_score;
}

/*
 * Implements ajax callback for storing time
 */

function quiz_testbank_exam_mode_time($form, &$form_state) {
	return $form['exam_mode']['time'];
}

/*
 * Quiz testbank answering form alter
 */

function quiz_testbank_form_quiz_question_answering_form_alter(&$form, &$form_state) {
	//if ($form_id == 'quiz_question_answering_form') {
	//unset($form['navigation']['back']['#attributes']);
	$nid = arg(1);
	$quiz = node_load($nid);

	//}
	$question_nid = $form['question_nid']['#value'];
	$number_of_questions = quiz_get_number_of_questions($quiz->vid);
	$question_number = $number_of_questions - count($_SESSION['quiz_' . $quiz->nid]['quiz_questions']);
	$current_question = $question_number + 1;
	$quiz_number = t('QID: @qid', array('@qid' => $question_nid));
	$quiz_number .= t(' Question <span id="quiz-question-number">!x</span> of <span id="quiz-num-questions ">@y</span>', array('!x' => $current_question, '@y' => $number_of_questions));
	$form['navigation']['number'] = array(
		'#type' => 'markup',
		'#markup' => $quiz_number,
		'#weight' => -10,
	);

	$form['navigation']['save'] = array(
		'#type' => 'submit',
		'#value' => 'Save Quiz',
		'#submit' => array('quiz_testbank_navigation_quiz_save_submit'),
	);

	if (isset($form['is_doubtful'])) {
		$form['navigation']['is_doubtful'] = $form['is_doubtful'];
		$form['navigation']['is_doubtful']['#title'] = t('Mark');
		$form['navigation']['is_doubtful']['#attributes'] = array('class' => array('container-inline'));
		$form['navigation']['is_doubtful']['#weight'] = -9;
		unset($form['navigation']['is_doubtful']['#attached']);
		unset($form['navigation']['is_doubtful']['#prefix']);
		unset($form['navigation']['is_doubtful']['#suffix']);
		unset($form['is_doubtful']);
	}

	$form['navigation']['#theme'] = 'quiz_testbank_quiz_navigation';
	$form['navigation']['#weight'] = -10;

	$form['#theme'] = 'quiz_testbank_answering_form';


	if ($quiz->feedback_time == 1 && $_SESSION['quiz_' . $quiz->nid]['hints'][$question_nid] == TRUE) {


		$additional = drupal_get_form('quiz_testbank_question_additional_details', $question_nid);
		$additonal_output = drupal_render($additional);

		$form['additional'] = array(
			'#type' => 'markup',
			'#markup' => $additonal_output,
			'#prefix' => '<div id=additional>',
			'#suffix' => '</div>',
		);
	}

	return $form;
}

/*
 * Implements hook theme reqistry alter
 */

function quiz_testbank_theme_registry_alter(&$theme_registry) {
	$results = $theme_registry['quiz_user_summary'];
	$theme_registry['quiz_user_summary']['file'] = 'quiz_testbank.module';
	$theme_registry['quiz_user_summary']['theme path'] = drupal_get_path('module', 'quiz_testbank');
	$theme_registry['quiz_user_summary']['function'] = 'theme_quiz_testbank_get_user_results';

	$quiz_node = $theme_registry['quiz_admin_summary'];
	$theme_registry['quiz_admin_summary']['file'] = 'quiz_testbank.module';
	$theme_registry['quiz_admin_summary']['theme path'] = drupal_get_path('module', 'quiz_testbank');
	$theme_registry['quiz_admin_summary']['function'] = 'theme_quiz_testbank_quiz_admin_summary';

	$quiz_take_summary = $theme_registry['quiz_take_summary'];
	$theme_registry['quiz_take_summary']['file'] = 'quiz_testbank.module';
	$theme_registry['quiz_take_summary']['theme path'] = drupal_get_path('module', 'quiz_testbank');
	$theme_registry['quiz_take_summary']['function'] = 'theme_quiz_testbank_quiz_take_summary';

	$quiz_jumber = $theme_registry['quiz_jumper'];
	$theme_registry['quiz_jumper']['file'] = 'quiz_testbank.module';
	$theme_registry['quiz_jumper']['theme path'] = drupal_get_path('module', 'quiz_testbank');
	$theme_registry['quiz_jumper']['function'] = 'theme_quiz_testbank_quiz_jumper';
	$theme_registry['quiz_jumper']['variables']['question_status'] = NULL;

	$quiz_progress = $theme_registry['quiz_progress'];
	$theme_registry['quiz_progress']['file'] = 'quiz_testbank.module';
	$theme_registry['quiz_progress']['theme path'] = drupal_get_path('module', 'quiz_testbank');
	$theme_registry['quiz_progress']['function'] = 'theme_quiz_testbank_quiz_progress';
}

/*
 * Implements form to display question result
 */

function quiz_testbank_question_result($result_id, $question_id) {
	global $user;
	$result = db_query('SELECT qnp.nid, qnp.vid, qnrs.uid
    FROM {quiz_node_properties} qnp
    INNER JOIN {quiz_node_results} qnrs ON qnrs.vid = qnp.vid
    WHERE qnrs.result_id = :rid', array(':rid' => $result_id))->fetch();
	$form = array();
	if ($result->nid) {
		// User can view own results (quiz_menu sets access to 'own results').
		// User with role 'user results' can view other user's results.
		if ($result->uid != $user->uid && !user_access('view any quiz results')) {
			drupal_access_denied();
			return;
		}

		$quiz = node_load($result->nid, $result->vid);
		$questions = _quiz_get_answers($quiz, $result_id);

		$question = $questions[$question_id];

		$module = quiz_question_module_for_type($question->type);
		if (!$module) {
			return array();
		}
		$function = $module . '_report_form';
		$form_to_add = $function($question, TRUE, TRUE);
		if (isset($form_to_add['submit'])) {
			$show_submit = TRUE;
		}
		$keys = array_keys($questions);

		$prev = false;
		$current = $question_id;
		$next = true;
		reset($keys);
		foreach ($keys as $i => $key) {
			if ($current == $key) {
				$i == 0 ? $prev = false : $prev = $keys[$i - 1];
				$i == (count($keys) - 1) ? $next = false : $next = $keys[$i + 1];
				break;
			}
		}
		$prevlink = "user/quiz/$result_id/userresults/";
		$nextlink = "user/quiz/$result_id/userresults/";
		if ($prev != false) {
			$prevlink.="$prev/result";
		}
		if ($next != false) {
			$nextlink.= "$next/result";
		}

		$additional = drupal_get_form('quiz_testbank_question_additional_details', $question->nid);
		$additonal_output = drupal_render($additional);

		$form_to_add['additional'] = array(
			'#type' => 'markup',
			'#markup' => $additonal_output,
			'#prefix' => '<div id=additional>',
			'#suffix' => '</div>',
		);

		$node = node_load($question->nid, $question->vid);
		$term = taxonomy_term_load($node->field_category['und']['0']['tid'])->name;
		$form_to_add['navigation']['category'] = array(
			'#markup' => "Questin Category : $term",
			'#prefix' => '<div>',
			'#suffix' => '</div>',
		);

		$form_to_add['navigation']['counter'] = array(
			'#markup' => "Question No " . ($i + 1) . " of " . count($keys),
			'#prefix' => '<div>',
			'#suffix' => '</div>',
		);

		$form_to_add['navigation']['prev_question'] = array(
			'#markup' => l('previous question', $prevlink),
		);

		$form_to_add['navigation']['next_question'] = array(
			'#markup' => l('next question', $nextlink),
		);

		$form[] = $form_to_add;
	}
	$form['#theme'] = 'quiz_testbank_report_form';
	$form['#showpoints'] = FALSE;
	$form['#showfeedback'] = TRUE;
	$form['#tree'] = TRUE;

	$output = $output = theme('quiz_result_summary_top', array('result_id' => $result_id));
	$output .= drupal_render($form);
	return $output;
}

function theme_quiz_testbank_get_user_results($variables) {
	$questions = $variables['questions'];
	$rid = $variables['rid'];
	$header = array('No', 'Question', 'Category', 'Correct', 'Score');
	$rows = array();
	$i = 1;
	foreach ($questions as $question) {
		$row['No'] = $i;
		$row['Question'] = l($question->title, "user/quiz/$rid/userresults/$question->nid/result");
		$node = node_load($question->nid, $question->vid);
		$category = taxonomy_term_load($node->field_category['und']['0']['tid'])->name;
		$row['Category'] = $category;
		$row['Correct'] = $question->correct ? "Correct" : "Wrong";
		$row['Score'] = $question->correct ? $question->max_score : 0;
		$rows[] = $row;
		$i++;
	}
	$output = theme('quiz_result_summary_top', array('result_id' => $rid));
	$output .= theme('quiz_testbank_quiz_result_questions', array('questions' => $questions, 'rid' => $rid));
	return $output;
}

function theme_quiz_testbank_quiz_admin_summary($variables) {
	$questions = $variables['questions'];
	$rid = $variables['rid'];
	$header = array('No', 'Question', 'Correct', 'Score');
	$rows = array();
	$i = 1;
	foreach ($questions as $question) {
		$row['No'] = $i;
		$row['Question'] = l($question->title, "user/quiz/$rid/userresults/$question->nid/result");
		$node = node_load($question->nid, $question->vid);
		$category = taxonomy_term_load($node->field_category['und']['0']['tid'])->name;
		$row['Category'] = $category;
		$row['Correct'] = $question->correct ? "Correct" : "Wrong";
		$row['Score'] = $question->correct ? $question->max_score : 0;
		$rows[] = $row;
		$i++;
	}
	$output = theme('quiz_result_summary_top', array('result_id' => $rid));
	$output .= theme('quiz_testbank_quiz_result_questions', array('questions' => $questions, 'rid' => $rid));
	return $output;
}

/*
 * Implements theming of quiz_take_summary
 */

function theme_quiz_testbank_quiz_take_summary($variables) {
	$quiz = $variables['quiz'];
	$questions = $variables['questions'];
	$score = $variables['score'];
	$summary = $variables['summary'];
	$rid = $variables['rid'];
	// Set the title here so themers can adjust.
	drupal_set_title($quiz->title);

	// Display overall result.
	$output = '';
	if (!empty($score['possible_score'])) {
		if (!$score['is_evaluated']) {
			if (user_access('score taken quiz answer')) {
				$msg = t('Parts of this @quiz have not been evaluated yet. The score below is not final. <a class="self-score" href="!result_url">Click here</a> to give scores on your own.', array('@quiz' => QUIZ_NAME, '!result_url' => url('node/' . $quiz->nid . '/results/' . $rid)));
			} else {
				$msg = t('Parts of this @quiz have not been evaluated yet. The score below is not final.', array('@quiz' => QUIZ_NAME));
			}
			drupal_set_message($msg, 'warning');
		}
		$output .= '<div id="quiz_score_possible">' . t('You got %num_correct of %question_count possible points.', array('%num_correct' => $score['numeric_score'], '%question_count' => $score['possible_score'])) . '</div>' . "\n";
		$output .= '<div id="quiz_score_percent">' . t('Your score: %score %', array('%score' => $score['percentage_score'])) . '</div>' . "\n";
	}
	if (isset($summary['passfail'])) {
		$output .= '<div id="quiz_summary">' . $summary['passfail'] . '</div>' . "\n";
	}
	if (isset($summary['result'])) {
		$output .= '<div id="quiz_summary">' . $summary['result'] . '</div>' . "\n";
	}
	// Get the feedback for all questions. These are included here to provide maximum flexibility for themers
	if ($quiz->display_feedback) {

		$header = array('No', 'Question', 'Correct', 'Score');
		$rows = array();
		$i = 1;
		foreach ($questions as $question) {
			$row['No'] = $i;
			$row['Question'] = l($question->title, "user/quiz/$rid/userresults/$question->nid/result");
			$row['Correct'] = $question->correct ? "Correct" : "Wrong";
			$row['Score'] = $question->correct ? $question->max_score : 0;
			$rows[] = $row;
			$i++;
		}
		$output .= theme('quiz_testbank_quiz_result_questions', array('questions' => $questions, 'rid' => $rid));
//    $form = drupal_get_form('quiz_report_form', $questions);
//    $output .= drupal_render($form);
	}
	return $output;
}

/*
 * Implements navigation button for saving quiz
 */

function quiz_testbank_navigation_quiz_save_submit($form, &$form_state) {
	global $user;
	drupal_set_message("Quiz has been saved");
	drupal_goto("user/$user->uid/myresults");
}

/*
 * Implements theme for showing results in questions correct display
 */

function theme_quiz_testbank_quiz_result_questions($variables) {
	$questions = $variables['questions'];
	$rid = $variables['rid'];
	$header = array('No', 'Question', 'Category', 'Correct', 'Score');
	$rows = array();
	$i = 1;
	foreach ($questions as $question) {
		$row['No'] = $i;
		$row['Question'] = l($question->title, "user/quiz/$rid/userresults/$question->nid/result");
		$node = node_load($question->nid, $question->vid);
		$category = taxonomy_term_load($node->field_category['und']['0']['tid'])->name;
		$row['Category'] = $category;
		$row['Correct'] = $question->correct ? "Correct" : "Wrong";
		$row['Score'] = $question->correct ? $question->max_score : 0;
		$rows[] = $row;
		$i++;
	}
	$output = theme('table', array('header' => $header, 'rows' => $rows));
	return $output;
}

/*
 * Implements quiz jumper theme
 */

function theme_quiz_testbank_quiz_jumper($variables) {
	$current = $variables['current'];
	$num_questions = $variables['num_questions'];
	$question_status = $variables['question_status'];
	$size = $num_questions < 20 ? 20 : $num_questions;
	$output = '<select name="quiz-jumper" class="form-select" size = "' . $size . '" id="quiz-testbank-jumper">';
	for ($i = 1; $i <= $num_questions; $i++) {
		$extra = $i == $current ? ' selected="selected"' : '';
		$output .= '<option value="' . $i . '"' . $extra . '>' . $i . '->' . $question_status[$i] . '</option>';
	}
	$output .= '</select><span id="quiz-jumper-no-js">' . $current . '</span>';
	drupal_add_js('
    (function ($) {
      Drupal.behaviors.quizJumper = {
        attach: function(context, settings) {
          $("#quiz-testbank-jumper:not(.quizJumper-processed)", context).show().addClass("quizJumper-processed").change(function(){
            $("[name=jump_to_question]").val($(this).val());
            $("#edit-submit").trigger("click");
          });
          $("#quiz-jumper-no-js:not(.quizJumper-processed)").hide().addClass("quizJumper-processed");
        }
      };
    })(jQuery);
  ', array('type' => 'inline', 'scope' => JS_DEFAULT));
	return $output;
}

/*
 * Implements quiz_progress block
 */

function theme_quiz_testbank_quiz_progress($variables) {
	$question_number = $variables['question_number'];
	$num_of_question = $variables['num_questions'];
	// TODO Number of parameters in this theme funcion does not match number of parameters found in hook_theme.
	// Determine the percentage finished (not used, but left here for other implementations).
	//$progress = ($question_number*100)/$num_of_question;
	// Get the current question # by adding one.
	$current_question = $question_number + 1;
	$quiz_jumper = '';

	if ($variables['allow_jumping']) {
		$quiz_jumper = theme('quiz_jumper', array('current' => $current_question, 'num_questions' => $num_of_question, 'question_status' => $variables['question_status']));
	}

	$output = '';
	$output .= '<div id="quiz-testbank-progress">';
	if ($variables['time_limit']) {
		$output .= '<div class="countdown"></div>';
	}
	$output .= $quiz_jumper;
	//$output .= t('Question <span id="quiz-question-number">!x</span> of <span id="quiz-num-questions">@y</span>', array('!x' => $current_question, '@y' => $num_of_question));
	$output .= '</div>' . "\n";
	// Add div to be used by jQuery countdown

	return $output;
}

/*
 * Implements preprocess function for quiz progress 
 */

function quiz_testbank_preprocess_quiz_progress(&$variables) {
	$nid = arg(1);
	$result_id = $_SESSION['quiz_' . $nid]['result_id'];
	$prev_questions = $_SESSION['quiz_' . $nid]['previous_quiz_questions'];
	$next_questions = $_SESSION['quiz_' . $nid]['quiz_questions'];
	$questions = array_merge($prev_questions, $next_questions);
	$q_rows = array();
	$i = 1;
	foreach ($questions as $question) {
		$question_status = quiz_testbank_get_question_status_result($result_id, $question['nid'], $question['vid']);
		$q_rows[$question['number']] = $question_status;
		$i++;
	}


	$quiz = node_load($nid);
	$variables['question_status'] = $q_rows;
}

/*
 * Gets question status for the question id for the quiz
 */

function quiz_testbank_get_question_status_result($result_id, $q_nid, $q_vid) {
	$query = db_select('quiz_node_results_answers', 'qna');
	$query->fields('qna', array('is_correct', 'is_skipped', 'is_doubtful'));
	$query->condition('result_id', $result_id);
	$query->condition('question_nid', $q_nid);
	$query->condition('question_vid', $q_vid);
	$result = $query->execute()->fetch();

	if (!$result) {
		return "not viewed";
	} else {
		if ($result->is_doubtful == 1) {
			return "marked";
		} else {
			return "viewed";
		}
	}
}

/*
 * Implements additional details form in question
 */

function quiz_testbank_question_additional_details($form, &$form_state, $question_nid) {

	$question = node_load($question_nid);
	$node_weights = _field_weight_get_node_weight($question_nid);
	if (isset($question->field_mechanism['und']) || isset($question->field_algorithm['und']) || isset($question->field_key_points['und']) || isset($question->field_evidence['und'])) {
		$form['vertical'] = array(
			'#type' => 'fieldset',
			'#title' => 'Hints',
			'#collpsible' => FALSE,
			'#collapsed' => FALSE,
		);
		$form['vertical']['vertical_tab'] = array(
			'#type' => 'vertical_tabs',
			'#attributes' => array('class' => array('quiz-testbank-vertical-tabs-list'))
		);
	}

	if (isset($question->field_mechanism['und'])) {
		$form['Mechanism_display'] = array(
			'#type' => 'fieldset',
			'#title' => 'Mechanism',
			'#collapsible' => FALSE,
			'#group' => 'vertical_tab',
			'#weight' => ($node_weights != false) ? $node_weights['field_mechanism'] : 0,
		);

		$form['Mechanism_display']['mechanism'] = array(
			'#type' => 'markup',
			'#markup' => isset($question->field_mechanism['und']) ? $question->field_mechanism['und']['0']['value'] : "",
			'#prefix' => '<div id=mechanism>',
			'#suffix' => '</div>',
		);
	}
	if (isset($question->field_algorithm['und'])) {
		$form['Algorithm_display'] = array(
			'#type' => 'fieldset',
			'#title' => 'Algorithm',
			'#collapsible' => FALSE,
			'#group' => 'vertical_tab',
			'#weight' => ($node_weights != false) ? $node_weights['field_algorithm'] : 0,
		);

		$form['Algorithm_display']['algorithm'] = array(
			'#type' => 'markup',
			'#markup' => isset($question->field_algorithm['und']) ? $question->field_algorithm['und']['0']['value'] : '',
			'#prefix' => '<div id=algorithm>',
			'#suffix' => '</div>',
		);
	}

	if (isset($question->field_key_points['und'])) {
		$form['Key_points_display'] = array(
			'#type' => 'fieldset',
			'#title' => 'Key Points',
			'#collapsible' => FALSE,
			'#group' => 'vertical_tab',
			'#weight' => ($node_weights != false) ? $node_weights['field_key_points'] : 0,
		);

		$form['Key_points_display']['key_points'] = array(
			'#type' => 'markup',
			'#markup' => isset($question->field_key_points['und']) ? $question->field_key_points['und']['0']['value'] : '',
			'#prefix' => '<div id=key_points>',
			'#suffix' => '</div>',
		);
	}
	if (isset($question->field_evidence['und'])) {
		$form['Evidence_display'] = array(
			'#type' => 'fieldset',
			'#title' => 'Evidence',
			'#collapsible' => FALSE,
			'#group' => 'vertical_tab',
			'#weight' => ($node_weights != false) ? $node_weights['field_evidence'] : 0,
		);

		$form['Evidence_display']['evidence'] = array(
			'#type' => 'markup',
			'#markup' => isset($question->field_evidence['und']) ? $question->field_evidence['und']['0']['value'] : '',
			'#prefix' => '<div id=evidence>',
			'#suffix' => '</div>',
		);
	}
	if (isset($question->field_answers['und'])) {
		$form['Answers_display'] = array(
			'#type' => 'fieldset',
			'#title' => 'Answers',
			'#collpsible' => FALSE,
			'#group' => 'vertical_tab',
			'#weight' => ($node_weights != false) ? $node_weights['field_answers'] : 0,
		);

		$form['Answers_display']['answers'] = array(
			'#type' => 'markup',
			'#markup' => isset($question->field_answers['und']) ? $question->field_answers['und']['0']['value'] : '',
			'#prefix' => '<div id=answers',
			'#suffix' => '</div>',
		);
	}
	return $form;
}

/*
 * Implements theme 'quiz_resutl_summary'
 */

function quiz_testbank_preprocess_quiz_result_summary_top(&$variables) {
	$rid = $variables['result_id'];

	$query = db_select('quiz_node_results', 'qnr');
	$query->fields('qnr');
	$query->condition('result_id', $rid);
	$result = $query->execute()->fetch();

	$quiz = node_load($result->nid, $result->vid);
	$user = user_load($result->uid);

	$query = db_select('quiz_node_relationship', 'qnr');
	$query->addExpression('count(qnr.child_nid)', 'total_questions');
	$query->condition('parent_nid', $result->nid);
	$query->condition('parent_vid', $result->vid);
	$total_items = $query->execute()->fetchColumn();
	$quiz->total_questions = $total_items;

	$query = db_select('quiz_node_results_answers', 'qna');
	$query->addExpression('count(qna.question_nid)', 'correct_items');
	$query->condition('result_id', $rid);
	$query->condition('is_correct', 1);
	$correct_items = $query->execute()->fetchColumn();
	$result->correct_questions = $correct_items;

	$variables['result'] = $result;
	$variables['quiz'] = $quiz;
	$variables['user'] = $user;
}

/*
 * Implements hook node form alter to display field weights
 */

function quiz_testbank_form_node_form_alter(&$form, $form_state) {
	$node = $form['#node'];

	if (_field_weight_node_type_check($node) == FALSE) {
		return;
	}
	$weight_form = array();
	$weight_form_state = array();
	$weight_form = field_weight_display_overview_form($weight_form, $weight_form_state, $node);
	unset($weight_form['submit']);
	$form['field_weight'] = $weight_form;
	$form['field_weight']['#weight'] = 50;
}

/*
 * Implements hook node insert to do update weights
 */

function quiz_testbank_node_update($node) {

	if (_field_weight_node_type_check($node) == FALSE) {
		return;
	}
	$values = $node->field_weight['field_weight'];
	$instances = field_info_instances('node', $node->type);

	$weights = array();

	foreach ($instances as $field => $instance) {
		$weights[$field] = array(
			'weight' => $values[$field]['weight'],
			'hidden' => $values[$field]['hidden'],
		);
	}

	// If all weights are 0 (unchanged) will return empty.
	$empty_check = array_filter($weights);

	if (!empty($empty_check)) {
		db_merge('field_weight')
			->key(array('nid' => $node->nid))
			->fields(array(
				'nid' => $node->nid,
				'type' => $node->type,
				'field_weights' => serialize($weights),
			))
			->execute();
	} elseif (empty($empty_check)) {
		// Remove entry if user manually sets all weights to 0.
		_field_weight_remove_weights($form, $form_state);
	}
}

/*
 * Implements field weights while inserting nodes
 */

function quiz_testbank_node_insert($node) {

	if (_field_weight_node_type_check($node) == FALSE) {
		return;
	}
	$values = $node->field_weight['field_weight'];
	$instances = field_info_instances('node', $node->type);

	$weights = array();

	foreach ($instances as $field => $instance) {
		$weights[$field] = array(
			'weight' => $values[$field]['weight'],
			'hidden' => $values[$field]['hidden'],
		);
	}

	// If all weights are 0 (unchanged) will return empty.
	$empty_check = array_filter($weights);

	if (!empty($empty_check)) {
		db_merge('field_weight')
			->key(array('nid' => $node->nid))
			->fields(array(
				'nid' => $node->nid,
				'type' => $node->type,
				'field_weights' => serialize($weights),
			))
			->execute();
	} elseif (empty($empty_check)) {
		// Remove entry if user manually sets all weights to 0.
		_field_weight_remove_weights($form, $form_state);
	}
}

/*
 * Implements node/%node/take , custom node taking function
 */

function quiz_testbank_take($node) {
	//drupal_alter('quiz_take', $node);
	if (isset($node->rendered_content)) {
		return $node->rendered_content;
	}
	$to_be_rendered = quiz_testbank_take_quiz($node);
	$output = '<div class ="quiz-testbank-question-outer">';
	$output .= drupal_render($to_be_rendered);
	$output .="</div>";
	return $output;
}

/*
 * Implements flow of taking the quiz
 */

function quiz_testbank_take_quiz($quiz) {
	global $user;
	$allow_skipping = $quiz->allow_skipping;

	if (!isset($quiz)) {
		drupal_not_found();
		return;
	}

	// If anonymous user and no unique hash, refresh with a unique string to
	// prevent caching.
	if (!$user->uid && arg(4) != NULL) {
		drupal_goto('node/' . $quiz->nid . '/take/' . md5(mt_rand() . time()));
	}

	// Make sure we use the same revision of the quiz throughout the quiz taking
	// session.
	if (isset($_SESSION['quiz_' . $quiz->nid]['quiz_vid']) && $quiz->vid != $_SESSION['quiz_' . $quiz->nid]['quiz_vid'] && variable_get('quiz_auto_revisioning')) {
		$quiz = node_load($quiz->nid, $_SESSION['quiz_' . $quiz->nid]['quiz_vid']);
	}

	// If the session has no data for this quiz.
	if (!isset($_SESSION['quiz_' . $quiz->nid]['quiz_questions'])) {
		// We delete questions in progress from old revisions.
		_quiz_delete_old_in_progress($quiz, $user->uid);

		// See if the current user has progress for this revision of the quiz stored
		// in the database
		$rid = $user->uid > 0 ? _quiz_active_result_id($user->uid, $quiz->nid, $quiz->vid) : 0;

		// Are we resuming an in-progress quiz?
		if ($quiz->allow_resume && $rid > 0) {
			_quiz_resume_existing_quiz($quiz, $user->uid, $rid);
		}

		// First time running through quiz.
		elseif (quiz_start_check($quiz, $rid) && (_quiz_take_quiz_init($quiz) === FALSE)) {
			return array('body' => array('#markup' => ''));
		} else {
			//return array('body' => array('#markup' => t('This quiz is closed')));
		}
	}

	$q_passed_validation = FALSE;
	$repeat_until_correct_error = FALSE;
	//$_SESSION['quiz_' . $quiz->nid]['hints'] = FALSE;

	if (quiz_availability($quiz) !== TRUE) {
		drupal_set_message(t('This quiz is not available anymore.'), 'error');
		return array('body' => array('#markup' => t('This quiz is closed')));
	}

	if (isset($_SESSION['quiz_' . $quiz->nid]['question_duration'])) {
		$_SESSION['quiz_' . $quiz->nid]['question_duration'] -= REQUEST_TIME - $_SESSION['quiz_' . $quiz->nid]['question_start_time'];
	}

	// For quiz progress block
	// To be able to jump from one question to another
	if (isset($_GET['jump_to_question'])) {
		if ($quiz->allow_jumping || _quiz_is_int($_GET['jump_to_question'])) {
			quiz_jump_to($_GET['jump_to_question'], $quiz, $_SESSION['quiz_' . $quiz->nid]['result_id']);
			// Doing drupal_goto() to prevent showing message last question was skipped
			// and also for skip to work as expected.
			drupal_goto("node/{$quiz->nid}/take");
		}
	}

	if (!isset($_POST['op'])) {
		// @todo Starting new quiz... Do we need to show instructions here?
	} elseif (isset($_POST['question_nid']) && ($_POST['question_nid'] != $_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0]['nid'])) {
		// The user has pressed the navigation buttons multiple times...
	} elseif (isset($_SESSION['quiz_' . $quiz->nid]['question_duration']) && $_SESSION['quiz_' . $quiz->nid]['question_duration'] < -2) {
		// Timed quiz where the time has gone out 2 seconds ago. Do not store the users results...
	}
	// Workaround to show question and feedback in separage pages, when the
	// feedback time it set to show after each questions
	elseif ($_POST['op'] == t('Next question')) {
		drupal_goto("node/{$quiz->nid}/take");
	}
	// We maintain two lists: previous questions and upcomming questions.
	// When we go backward, we pop one from the previous and prepend it to the
	// upcomming.
	// @todo This can be maintained more efficiently with a single array of all
	//   questions and then a pointer to the current question. That makes
	//   rewinding much easier.
	// Check for answer submission.
	elseif ($_POST['op'] == t('Finish') || $_POST['op'] == t('Next') || $_POST['op'] == t('Back') && $quiz->backwards_navigation) {
		// Previous quiz questions: Questions that have been asked already. We save
		// a record of all of them so that a user can navigate backward all the way
		// to the beginning of the quiz.
		$_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0]['rid'] = $_SESSION['quiz_' . $quiz->nid]['result_id'];
		$_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions'][] = $_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0];
		$former_question_array = array_shift($_SESSION['quiz_' . $quiz->nid]['quiz_questions']);
		$former_question = node_load($former_question_array['nid'], $former_question_array['vid']);

		// Call hook_evaluate_question().
		$types = _quiz_get_question_types();
		$module = $types[$former_question->type]['module'];
		$result = module_invoke($module, 'evaluate_question', $former_question, $_SESSION['quiz_' . $quiz->nid]['result_id']);
		$q_passed_validation = $result->is_valid;
		$check_jump = TRUE;
		if ($q_passed_validation === TRUE) {
			quiz_store_question_result($quiz, $result, array('set_msg' => TRUE, 'question_data' => $former_question_array));
		} elseif ($quiz->allow_jumping && _quiz_is_int($_POST['jump_to_question'])) {
			$_POST['op'] = t('Leave blank');
			$allow_skipping = TRUE;
			$jumping = TRUE;
		}

		if ($quiz->repeat_until_correct && $_POST['op'] != t('Back') && $q_passed_validation === TRUE) {
			// If the question was answered incorrectly, repeat it
			if ($result && !$result->is_correct && $result->is_evaluated) {
				$last_q = array_pop($_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions']);
				array_unshift($_SESSION['quiz_' . $quiz->nid]['quiz_questions'], $last_q);
				drupal_set_message(t('The answer was incorrect. Please try again.'), 'error');
				$repeat_until_correct_error = TRUE;
				$_SESSION['quiz_' . $quiz->nid]['hints'][$last_q['nid']] = TRUE;
				unset($_SESSION['quiz_' . $quiz->nid]['feedback']);
			}
		} elseif ($_POST['op'] == t('Back') && $quiz->backwards_navigation) {
			$quiz_id = 'quiz_' . $quiz->nid;
			// We jump back two times. From the next question to the current, and then
			// from the current to the previous.
			for ($i = 0; $i < 2; $i++) {
				$last_q = array_pop($_SESSION[$quiz_id]['previous_quiz_questions']);
				array_unshift($_SESSION[$quiz_id]['quiz_questions'], $last_q);
			}
		}

		// Stash feedback in the session, since the $_POST gets cleared.
		if ($quiz->feedback_time == QUIZ_FEEDBACK_QUESTION && $_POST['op'] != t('Back') && $q_passed_validation === TRUE && $repeat_until_correct_error === FALSE) {
			// Invoke hook_get_report().
			$report = module_invoke($module, 'get_report', $former_question_array['nid'], $former_question_array['vid'], $_SESSION['quiz_' . $quiz->nid]['result_id']);
			$path = drupal_get_path('module', 'quiz');
			require_once DRUPAL_ROOT . '/' . $path . '/quiz.pages.inc';
			if ($report) {
				$report_form = drupal_get_form('quiz_report_form', array($report), TRUE, TRUE, TRUE);
				$report_form['op'] = array(
					'#type' => 'submit',
					'#value' => t('Next question'),
				);
				return $report_form;
			}
		}

		// If anonymous user, refresh url with unique hash to prevent caching.
		if (!$user->uid && $q_passed_validation === TRUE) {
			drupal_goto('node/' . $quiz->nid . '/take', array('query' => array('quizkey' => md5(mt_rand() . REQUEST_TIME))));
		}
	}
	// Check for a skip.
	if (isset($_POST['op']) && ($_POST['op'] == t('Leave blank') || $_POST['op'] == t('Leave blank and finish')) && $allow_skipping) {

		if (!isset($_SESSION['quiz_' . $quiz->nid]['result_id'])) {
			$_SESSION['quiz_' . $quiz->nid]['result_id'] = quiz_create_rid($quiz);
		}
		$q_passed_validation = TRUE;
		// Advance the question.
		if (!isset($jumping) || (isset($jumping) && !$jumping)) {
			$_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions'][] = $_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0];

			// Load the last asked question.
			$former_question_array = array_shift($_SESSION['quiz_' . $quiz->nid]['quiz_questions']);
			$former_question = node_load($former_question_array['nid'], $former_question_array['vid']);
		}
		// Call hook_skip_question().
		$module = quiz_question_module_for_type($former_question->type);
		if (!$module) {
			return array('body' => array('#markup' => ' '));
		}
		$result = module_invoke($module, 'skip_question', $former_question, $_SESSION['quiz_' . $quiz->nid]['result_id']);


		// Store that the question was skipped:
		quiz_store_question_result($quiz, $result, array('set_msg' => TRUE, 'question_data' => $former_question_array));
	}

	if (isset($check_jump) && $check_jump) {
		if ($quiz->allow_jumping && _quiz_is_int($_POST['jump_to_question'])) {
			quiz_jump_to($_POST['jump_to_question'], $quiz, $_SESSION['quiz_' . $quiz->nid]['result_id']);
		}
	}
	$show_validation_message = FALSE;

	// If this quiz is in progress, load the next questions and return it via the theme.
	if (!empty($_SESSION['quiz_' . $quiz->nid]['quiz_questions']) || is_string($q_passed_validation)) {

		// If we got no error when validating the question
		if (!is_string($q_passed_validation) || $_POST['op'] == t('Back') && $quiz->backwards_navigation) {
			$question_node = node_load(
				$_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0]['nid'], $_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0]['vid']
			);
			if (isset($_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0]['rid'])) {
				$question_node->rid = $_SESSION['quiz_' . $quiz->nid]['quiz_questions'][0]['rid'];
			}
			// We got an error message when trying to validate the previous answer
		} else {
			$question_node = $former_question;
			$show_validation_message = TRUE;
			array_unshift($_SESSION['quiz_' . $quiz->nid]['quiz_questions'], $former_question_array);
			if (is_array($_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions'])) {
				array_pop($_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions']);
			}
			// Avoid caching for anonymous users
			if (!$user->uid) {
				drupal_set_message($q_passed_validation, 'error');
				drupal_goto('node/' . $quiz->nid . '/take', array('query' => array('quizkey' => md5(mt_rand() . REQUEST_TIME))));
			}
		}

		// Added the progress info to the view.
		$number_of_questions = quiz_get_number_of_questions($quiz->vid);

		$question_number = $number_of_questions - count($_SESSION['quiz_' . $quiz->nid]['quiz_questions']);
		$question_node->question_number = $question_number;
		$content['progress']['#markup'] = theme('quiz_progress', array(
			'question_number' => $question_number,
			'num_questions' => $number_of_questions,
			'allow_jumping' => $quiz->allow_jumping,
			'time_limit' => $quiz->time_limit));
		$content['progress']['#weight'] = -50;
		if (count($_SESSION['quiz_' . $quiz->nid]['quiz_questions']) + count($_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions']) > $number_of_questions) {
			drupal_set_message(t('At least one question have been deleted from the quiz after you started taking it. You will have to start over.'), 'warning', FALSE);
			unset($_SESSION['quiz_' . $quiz->nid]);
			drupal_goto('node/' . $quiz->nid . '/take');
		}

		if (isset($_SESSION['quiz_' . $quiz->nid]['question_duration'])) {
			$time = $_SESSION['quiz_' . $quiz->nid]['question_duration'];
			if ($time < 1) {
				// The page was probably submitted by the js, we allow the data to be stored
				$time = 1;
			}
			db_update('quiz_node_results')
				->fields(array('time_left' => $time))
				->condition('result_id', $_SESSION['quiz_' . $quiz->nid]['result_id'])
				->execute();

			if ($time <= 1) {
				// Quiz has been timed out, run a loop to mark the remaining questions
				// as skipped.
				quiz_jump_to(count($_SESSION['quiz_' . $quiz->nid]['quiz_questions']) + count($_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions']) + 1, $quiz, $_SESSION['quiz_' . $quiz->nid]['result_id']);
				$quiz_end = TRUE;
				unset($content['progress']);
				$show_validation_message = FALSE;
				drupal_set_message(t('You have run out of time.'), 'error');
			} else {
				// There is still time left, so let's go ahead and insert the countdown
				// javascript.
				if (function_exists('jquery_countdown_add') && variable_get('quiz_has_timer', 1)) {
					jquery_countdown_add('.countdown', array('until' => $time, 'onExpiry' => 'finished', 'compact' => TRUE, 'layout' => t('Time left') . ': {hnn}{sep}{mnn}{sep}{snn}'));
					// These are the two button op values that are accepted for answering
					// questions.
					$button_op1 = drupal_json_encode(t('Finish'));
					$button_op2 = drupal_json_encode(t('Next'));
					$js = "
            function finished() {
              // Find all buttons with a name of 'op'.
              var buttons = jQuery('input[type=submit][name=op], button[type=submit][name=op]');
              // Filter out the ones that don't have the right op value.
              buttons = buttons.filter(function() {
                return this.value == $button_op1 || this.value == $button_op2;
              });
              if (buttons.length == 1) {
                // Since only one button was found, this must be it.
                buttons.click();
              }
              else {
                // Zero, or more than one buttons were found; fall back on a page refresh.
                window.location = window.location.href;
              }
            }
          ";
					drupal_add_js($js, array('type' => 'inline', 'scope' => JS_DEFAULT));
				}
			}
			$_SESSION['quiz_' . $quiz->nid]['question_start_time'] = REQUEST_TIME;
		}
		if ($show_validation_message) {
			drupal_set_message($q_passed_validation, 'error');
		}

		// If we're not yet at the end.
		if (empty($quiz_end)) {
			$content['body']['question']['#markup'] = quiz_take_question_view($question_node, $quiz);
			$content['body']['question']['#weight'] = 0;
			// If we had feedback from the last question.
			if (isset($_SESSION['quiz_' . $quiz->nid]['feedback']) && $quiz->feedback_time == QUIZ_FEEDBACK_QUESTION) {
				$content['body']['feedback']['#markup'] = rawurldecode($_SESSION['quiz_' . $quiz->nid]['feedback']);
				$content['body']['feedback']['#weight'] = -100;
			}
			drupal_set_title($quiz->title);
			unset($_SESSION['quiz_' . $quiz->nid]['feedback']);
		}
	}
	// Else we're at the end of quiz.
	else {
		drupal_set_title($quiz->title);
		$quiz_end = TRUE;
	}

	// If we're at the end of the quiz.
	if (!empty($quiz_end)) {
		// IMPORTANT: Because of a bug _quiz_get_answers always have to be called before quiz_end_scoring... :/
		$questions = _quiz_get_answers($quiz, $_SESSION['quiz_' . $quiz->nid]['result_id']);
		$score = quiz_end_scoring($quiz, $_SESSION['quiz_' . $quiz->nid]['result_id']);
		if ($quiz->feedback_time == QUIZ_FEEDBACK_NEVER) {
			$content['body']['#markup'] = theme('quiz_no_feedback');
		} else {
			// Get the results and summary text for this quiz.
			$summary = _quiz_get_summary_text($quiz, $score);
			$data = array(
				'quiz' => $quiz,
				'questions' => $questions,
				'score' => $score,
				'summary' => $summary,
				'rid' => $_SESSION['quiz_' . $quiz->nid]['result_id'],
			);
			// Get the themed summary page.
			$content['body']['#markup'] = theme('quiz_take_summary', $data);
		}
		if ($score['is_evaluated']) {
			_quiz_maintain_results($quiz, $_SESSION['quiz_' . $quiz->nid]['result_id']);
		}

		// Remove session variables, save $rid
		$session_data = $_SESSION['quiz_' . $quiz->nid];
		unset($_SESSION['quiz_' . $quiz->nid]);
		// NOTE: End actions might redirect the user somewhere. Code below this line might not get executed...
		quiz_end_actions($quiz, $score, $session_data);
	}


	return $content;
}

/*
 * Implements quiz navigation theme
 */

function theme_quiz_testbank_quiz_navigation(&$variables) {
	$elements = $variables['navigation'];
	$output = '<div id= "quiz-testbank-navigation">';
	foreach (element_children($elements) as $child) {
		$output.= '        ' . drupal_render($elements[$child]);
	}
	$output .= '</div>';
	return $output;
}

/*
 * Impmements answering form theme
 */

function theme_quiz_testbank_answering_form(&$variables) {
	$form = $variables['form'];

	$output = drupal_render($form['navigation']);
	unset($form['navigation']);
	$output .= '<div class ="quiz-testbank-answering-form">';
	foreach (element_children($form) as $child) {
		$output .= drupal_render($form[$child]);
	}
	$output .= '</div>';
	return $output;
}

/*
 * Implements preprocess function for page
 */

function quiz_testbank_preprocess_page(&$vars) {
	$path = $_GET['q'];
	$pagepath = 'node/' . $vars['node']->nid . "/take";
//	if ($path == $pagepath) {
//		drupal_set_title('');
//	}
}

/*
 * Implements process function for page
 */
function quiz_testbank_process_page(&$vars) {
	$path = current_path();
	$pagepath = 'node/' . $vars['node']->nid . '/take';
	if ($path == $pagepath) {
		$vars['title'] = '';
	}
}
/*
 * Implements new change
 */